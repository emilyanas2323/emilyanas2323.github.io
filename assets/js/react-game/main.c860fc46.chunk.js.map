{"version":3,"sources":["index.js"],"names":["Cell","props","className","value","onClick","Board","createBoard","board","i","cells","j","push","renderCell","key","state","squares","intializeSquares","greenIsNext","Array","fill","this","slice","columnFull","calculateWinner","row","x","setState","full","k","handleClick","status","winner","React","Component","Game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c860fc46.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Cell(props) {\r\n    return (\r\n      <button className={`cell ${props.value}`} onClick={() => props.onClick()}></button>\r\n    );\r\n  }\r\n  \r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            squares: this.intializeSquares(),\r\n            greenIsNext: true,  \r\n        }\r\n    }\r\n\r\n    intializeSquares() {\r\n        let squares = [];\r\n        for(var j = 0; j < 7; j++){\r\n            squares[j] = Array(6).fill(null);\r\n        }\r\n        return squares;\r\n    }\r\n\r\n    handleClick(i,j) {\r\n        // creates a copy of the squares array so we can modify it\r\n        const squares = this.state.squares.slice();\r\n        // no turns are played if the board is full or if someone already won\r\n        if(this.columnFull(i) || this.calculateWinner(this.state.squares)) {\r\n            return;\r\n        }\r\n        // determines where the piece will drop to\r\n        let row;\r\n        for(var x = 5; x >= 0; x--) {\r\n            if (!squares[i][x]) {\r\n                row = x;\r\n                break;\r\n            }\r\n        }\r\n        // places the piece on the grid\r\n        squares[i][row] = this.state.greenIsNext ? 'green' : 'pink';\r\n        // this function makes changes to board's state and tells React to rerender this component + its children\r\n        this.setState({ \r\n            squares: squares,\r\n            greenIsNext: !this.state.greenIsNext,\r\n        });\r\n    }\r\n\r\n    columnFull(i) {\r\n        if (this.state.squares[i][0]) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    calculateWinner(squares) {\r\n        for (var i = 0; i < 7; i++) {\r\n            for(var j = 0; j < 6; j++) {\r\n                \r\n                // checks that a piece has been placed in the cell\r\n                if(squares[i][j]) {\r\n\r\n                    // checks for horizontal win\r\n                    if(i >= 3) {\r\n                        if(squares[i][j] === squares[i-1][j] && squares[i-1][j] === squares[i-2][j] && squares[i-2][j] === squares[i-3][j]) {\r\n                            // returns the winning colour\r\n                            return squares[i][j];\r\n                        }\r\n                    }\r\n\r\n                    // checks for vertical win\r\n                    if(j >= 3) {\r\n                        if(squares[i][j] === squares[i][j-1] && squares[i][j-1] === squares[i][j-2] && squares[i][j-2] === squares[i][j-3]) {\r\n                            return squares[i][j];\r\n                        }\r\n                    }\r\n\r\n                    // checks for diagonal win\r\n                    if(j >= 3) {\r\n                        if(i >= 3) {\r\n                            if(squares[i][j] === squares[i-1][j-1] && squares[i-1][j-1] === squares[i-2][j-2] && squares[i-2][j-2] === squares[i-3][j-3]) {\r\n                                return squares[i][j];\r\n                            }\r\n                        }\r\n\r\n                         if(i <= 3) {\r\n                            if(squares[i][j] === squares[i+1][j-1] && squares[i+1][j-1] === squares[i+2][j-2] && squares[i+2][j-2] === squares[i+3][j-3]) {\r\n                                return squares[i][j];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // checks if there is a tie\r\n        var full = true;\r\n        for(var k = 0; k < 7; k++) {\r\n            if (!this.columnFull(k)) {\r\n                full = false;\r\n            }\r\n        }\r\n        if(full) {\r\n            return \"Tie\";\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    renderCell(i,j) {\r\n        return <Cell value={this.state.squares[i][j]} onClick={() => this.handleClick(i,j)} key={\"i: \"+ i + \" j: \" + j} />;\r\n    }\r\n\r\n    createBoard = () => {\r\n        let board = []\r\n        for (var i = 0; i < 6; i++) {\r\n          let cells = []\r\n          for (var j = 0; j < 7; j++) {\r\n            cells.push(this.renderCell(j,i))\r\n          }\r\n          board.push(<div className=\"board-row\" key={i}>{cells}</div>);\r\n        }\r\n        return board;\r\n    }\r\n\r\n    render() {\r\n        const winner = this.calculateWinner(this.state.squares);\r\n        let status;\r\n        if (winner) {\r\n            status = \"Winner: \" + winner + \"!\";\r\n        }\r\n        else {\r\n            status = 'Next player: ' + (this.state.greenIsNext ? 'Green' : 'Pink');\r\n        }\r\n\r\n        return (\r\n        <div>\r\n            <div className=\"status\">\r\n                {status}\r\n            </div>\r\n            \r\n            <div className=\"game-board\">\r\n                {this.createBoard()}\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    render() {\r\n        return (\r\n        <div className=\"game\">\r\n            <Board />\r\n        </div>\r\n        );\r\n    }\r\n}\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  "],"sourceRoot":""}